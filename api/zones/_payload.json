[{"data":1,"prerenderedAt":312},["ShallowReactive",2],{"search-api":3},[4,11,20,27,38,46,59,66,75,83,94,106,113,121,128,135,142,152,160,167,174,182,193,209,217,226,244,253,259,267,274,282,288,294,300,306],{"id":5,"path":6,"dir":7,"title":8,"description":7,"keywords":9,"body":10},"content:0.index.md","/","","PHP Client for Cloudflare API",[],"     PHP Client for Cloudflare API   A simple Object Oriented PHP Client for   Cloudflare API .\nThis package provides convenient access to the Cloudflare REST API using PHP.     PHP >= 8.0  Minimal API around the   Guzzle HTTP client  Laravel >= 9 support   see Laravel Usage  ",{"id":12,"path":13,"dir":7,"title":14,"description":15,"keywords":16,"body":19},"content:1.getting-started:0.index.md","/getting-started","Get Started","A simple Object Oriented PHP Client for Cloudflare API.\nThis package provides convenient access to the Cloudflare REST API using PHP.",[17,18],"Installation","Usage","  Getting Started  A simple Object Oriented PHP Client for   Cloudflare API .\nThis package provides convenient access to the Cloudflare REST API using PHP.  Installation  Install   php-cloudflare-api  via Composer:     composer   require   sergkeim/php-cloudflare-api\n  The full Installation of this package can be found   here .  Usage  The full Usage of this package can be found   here .     \u003C?  php\n   \n   use   Cloudflare\\Client  ;\n   \n   $client   =   new   Client  (  'CLOUDFLARE_TOKEN'  );\n   \n   $response   =   $client  ->  accounts  ()  ->  list  ();\n   \n   $results   =   $response  ->  json  (  'results'  );\n  html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":21,"path":22,"dir":23,"title":17,"description":24,"keywords":25,"body":26},"content:1.getting-started:1.installation.md","/getting-started/installation","getting-started","Install php-cloudflare-api via Composer:",[],"  Installation  Install   php-cloudflare-api  via Composer:     composer   require   sergkeim/php-cloudflare-api\n  html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":28,"path":29,"dir":23,"title":18,"description":30,"keywords":31,"body":37},"content:1.getting-started:3.usage.md","/getting-started/usage","Documentation for each method, request param, and response field are available via PHPDoc and will appear on hover in most modern editors.",[32,33,34,35,36],"Client","Response","Error Handling","Guzzle Middleware","Making custom/undocumented requests","  Usage  Documentation for each method, request param, and response field are available via PHPDoc and will appear on hover in most modern editors.  Client     \u003C?  php\n   \n   use   Cloudflare\\Client  ;\n   \n   $client   =   new   Client  (  'CLOUDFLARE_TOKEN'  );\n   \n   $response   =   $client  ->  accounts  ()  ->  list  ();\n   \n   $results   =   $response  ->  json  ();\n  Response  Every call to an API returns an instance of   Cloudflare\\HttpClient\\Response , which provides a variety of methods that may be used to inspect the response:     $response  ->  body  () :   string  ;\n   $response  ->  json  ($key   =   null  , $default   =   null  ) :   mixed  ;\n   $response  ->  status  () :   int  ;\n   $response  ->  successful  () :   bool  ;\n   $response  ->  failed  () :   bool  ;\n   $response  ->  toPsrResponse  () : \\  Psr  \\  Http  \\  Message  \\  ResponseInterface  ;\n  Error Handling  When the client is unable to connect to the API   Cloudflare\\HttpClient\\Exceptions\\ConnectionException  will be thrown.  If the API returns a non-success status code (i.e., 4xx or 5xx response), a subclass of   Cloudflare\\HttpClient\\Exceptions\\RequestException  will be thrown:     Status Code  Error Type    400   BadRequestException   401   AuthenticationException   403   PermissionDeniedException   404   NotFoundException   422   UnprocessableEntityException   429   RateLimitException   >=500   InternalServerException   N/A   RequestException  The   Cloudflare\\HttpClient\\Exceptions\\RequestException  instance has a public $response property which will allow you to inspect the returned response.  Guzzle Middleware  Since PHP Client for Cloudflare API is powered by Guzzle, you may take advantage of   Guzzle Middleware  to manipulate the outgoing request or inspect the incoming response.     \u003C?  php\n   \n   use   Cloudflare\\Client  ;\n   use   Psr\\Http\\Message\\RequestInterface  ;\n   use   Psr\\Http\\Message\\ResponseInterface  ;\n   \n   $middlewares   =   [\n       function   (  callable   $handler) {\n           return   function   (\n               RequestInterface   $request,\n               array   $options\n           )   use   ($handler) {\n               $promise   =   $handler($request, $options);\n               return   $promise  ->  then  (\n                   function   (  ResponseInterface   $response) {\n                       $header   =   $response  ->  getHeader  (  'X-Example'  );\n                       // ...\n                       return   $response;\n                   }\n               );\n           };\n       }\n   ];\n   \n   $client   =   new   Client  (  'CLOUDFLARE_TOKEN'  , $middlewares);\n   \n   $response   =   $client  ->  accounts  ()  ->  list  ();\n   \n   $results   =   $response  ->  json  ();\n  Making custom/undocumented requests  This package provides convenient access to the Cloudflare REST API. If you need to access undocumented endpoints, the package can still be used.     \u003C?  php\n   \n   use   Cloudflare\\Client  ;\n   \n   $client   =   new   Client  (  'CLOUDFLARE_TOKEN'  );\n   \n   $response   =   $client  ->  getHttpClient  ()  ->  get  (  '/some/path'  , [\n       'some_query_arg'   =>   'bar'\n   ]);\n   \n   $results   =   $response  ->  json  ();\n  html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":39,"path":40,"dir":23,"title":41,"description":42,"keywords":43,"body":45},"content:1.getting-started:4.laravel.md","/getting-started/laravel","Laravel","Once installed, if you are not using automatic package discovery, then you need to register the Cloudflare\\CloudflareServiceProvider service provider in your config/app.php.",[44,18],"Configuration","  Laravel  Once installed, if you are not using automatic package discovery, then you need to register the   Cloudflare\\CloudflareServiceProvider  service provider in your   config/app.php .  You can also optionally alias our facade:     'Cloudflare'   =>   Cloudflare\\Facades\\Cloudflare  ::class  ,\n  Configuration  Laravel Cloudflare requires connection configuration.  To get started, you'll need to publish all vendor assets:     php   artisan   vendor:publish\n  This will create a   config/cloudflare.php  file in your app that you can modify to set your configuration. Also, make sure you check for changes to the original config file in this package between releases.  There are two config options:  Default Connection Name  This option (  'default' ) is where you may specify which of the connections below you wish to use as your default connection for all work. Of course, you may use many connections at once using the manager class. The default value for this setting is   'main' .  Cloudflare Connections  This option (  'connections' ) is where each of the connections are setup for your application. Example configuration has been included, but you may add as many connections as you would like..  Usage  CloudflareManager   CloudflareManager  is bound to the ioc container as   'cloudflare'  and can be accessed using the   Facades\\Cloudflare  facade.  This class implements the   ManagerInterface  by extending   AbstractManager . The interface and abstract class are both part of   Graham Campbell - Laravel Manager  package, so you may want to go and checkout the docs for how to use the manager class over at   that repo .   Note : that the connection class returned will always be an instance of   Cloudflare\\Client .  Facades\\Cloudflare  This facade will dynamically pass static method calls to the   'cloudflare'  object in the ioc container which by default is the   CloudflareManager  class.  CloudflareServiceProvider  This class contains no public methods of interest. This class should be added to the providers array in   config/app.php . This class will setup ioc bindings.  Here you can see an example of just how simple this package is to use. Out of the box, the default adapter is   main . After you enter your   token  in the config file, it will just work:     use   Cloudflare\\Facades\\Cloudflare  ;\n   // you can alias this in config/app.php if you like\n   \n   Cloudflare  ::  accounts  ()  ->  list  ();\n   \n   // or\n   \n   Cloudflare  ::  accounts  ()  ->  details  (  'ACCOUNT_ID'  );\n  The cloudflare manager will behave like it is a   Cloudflare\\Client  class. If you want to call specific connections, you can do with the   connection  method:     use   Cloudflare\\Facades\\Cloudflare  ;\n   \n   // the secondary connection is the other example provided in the default config\n   Cloudflare  ::  connection  (  'secondary'  )  ->  accounts  ()  ->  members  ()  ->  details  (  'ACCOUNT_ID'  ,   'MEMBER_ID'  );\n  If you prefer to use dependency injection over facades, then you can easily inject the manager like so:     use   Cloudflare\\CloudflareManager  ;\n   \n   class   Foo\n   {\n   \n       public   function   __construct  (\n           private   CloudflareManager   $cloudflare\n       ) {\n   \n       }\n   \n       public   function   bar  ()\n       {\n           $this  ->  cloudflare  ->  accounts  ()  ->  details  (  'ACCOUNT_ID'  );\n       }\n   }\n   \n   app  (  Foo  ::class  )  ->  bar  ();\n  html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":47,"path":48,"dir":49,"title":50,"description":51,"keywords":52,"body":58},"content:2.api:0.accounts:0.accounts.md","/api/accounts/accounts","accounts","Accounts","An account refers to an organization account. Accounts contain one or more users and can contain one or more zones.",[53,54,55,56,57],"List","Create","Details","Update","Delete","  Accounts  An account refers to an organization account. Accounts contain one or more users and can contain one or more zones. A user can be part of one or more accounts.  Cloudflare API docs  List  List all accounts you have ownership or verified access to.     $response   =   $client  ->  accounts  ()  ->  list  ();\n  Create  Create an account.     $response   =   $client  ->  accounts  ()  ->  create  (  'Name'  ,   'standard'  ,   'f267e341f3dd4697bd3b9f71dd96247f'  );\n  Details  Get information about a specific account that you are a member of.     $response   =   $client  ->  accounts  ()  ->  details  (  'ACCOUNT_ID'  );\n  Update  Update an existing account.     $response   =   $client  ->  accounts  ()  ->  update  (  'ACCOUNT_ID'  ,   'New Name'  );\n  Delete  Delete an existing account.     $response   =   $client  ->  accounts  ()  ->  delete  (  'ACCOUNT_ID'  );\n  html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":60,"path":61,"dir":49,"title":62,"description":63,"keywords":64,"body":65},"content:2.api:0.accounts:1.roles.md","/api/accounts/roles","Roles","Whenever you add a new member to your account, you can assign policies to those users and make use of the available roles.",[53,55],"  Roles  Whenever you add a new member to your account, you can assign policies to those users and make use of the available roles. Roles can only ever be assigned to their given scope and multiple roles can be assigned to a given policy.  Cloudflare API docs  List  Get all available roles for an account.     $response   =   $client  ->  accounts  ()  ->  roles  ()  ->  list  (  'ACCOUNT_ID'  );\n  Details  Get information about a specific role for an account.     $response   =   $client  ->  accounts  ()  ->  roles  ()  ->  details  (  'ACCOUNT_ID'  ,   'ROLE_ID'  );\n  html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":67,"path":68,"dir":49,"title":69,"description":70,"keywords":71,"body":74},"content:2.api:0.accounts:2.members.md","/api/accounts/members","Members","On any Cloudflare account, you can collaborate by adding members to your account and assigning them access via one or several policies.",[53,72,55,56,73],"Add","Remove","  Members  On any Cloudflare account, you can collaborate by adding members to your account and assigning them access via one or several policies.  Cloudflare API docs  List  List all members of an account.     $response   =   $client  ->  accounts  ()  ->  members  ()  ->  list  (  'ACCOUNT_ID'  );\n  Add  Add a user to the list of members for this account.     $values   =   [\n       'email'   =>   'john.doe@gmail.com'  ,\n       'roles'   =>   'the role'\n   ];\n   \n   $response   =   $client  ->  accounts  ()  ->  members  ()  ->  add  (  'ACCOUNT_ID'  , $values);\n  Details  Get informationabout a specific member of an account.     $response   =   $client  ->  accounts  ()  ->  members  ()  ->  details  (  'ACCOUNT_ID'  ,   'MEMBER_ID'  );\n  Update  Modify an account member.  Update roles     \n   $roles   =   [\n       [\n           \"id\"   =>   \"role_id_1\"\n       ],\n       [\n           \"id\"   =>   \"role_id_2\"\n       ]\n   ];\n   $response   =   $client  ->  accounts  ()  ->  members  ()  ->  updateRoles  (  'ACCOUNT_ID'  ,   'MEMBER_ID'  , $roles);\n  Update policies     \n   $policies   =   [\n       [\n           'access'   =>   'allow'  ,\n           'permission_groups'   =>   [\n               [\n                   \"id\"   =>   \"permission_group_id\"\n               ]\n           ],\n           \"resource_groups\"   =>   [\n               \"id\"   =>   \"resource_group_id\"\n           ]\n       ]\n   ];\n   $response   =   $client  ->  accounts  ()  ->  members  ()  ->  updatePolicies  (  'ACCOUNT_ID'  ,   'MEMBER_ID'  , $policies);\n  Remove  Remove a member from an account.     $response   =   $client  ->  accounts  ()  ->  members  ()  ->  delete  (  'ACCOUNT_ID'  ,   'MEMBER_ID'  );\n  html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":76,"path":77,"dir":49,"title":78,"description":79,"keywords":80,"body":82},"content:2.api:0.accounts:4,audit-logs.md","/api/accounts/4audit-logs","Audit logs","Audit logs summarize the history of changes made within your Cloudflare account. Audit logs include account level actions like login, as well as zone configuration changes.",[81],"Get","  Audit logs  Audit logs summarize the history of changes made within your Cloudflare account. Audit logs include account level actions like login, as well as zone configuration changes.  Cloudflare API docs  Get  Gets a list of audit logs for an account. Can be filtered by who made the change, on which zone, and the timeframe of the change.     $response   =   $client  ->  accounts  ()  ->  auditLogs  ()  ->  list  (  'ACCOUNT_ID'  );\n  html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":84,"path":85,"dir":86,"title":87,"description":88,"keywords":89,"body":93},"content:2.api:1.zones:0.index.md","/api/zones","api","Zones","Domains (or subdomains) that are added to Cloudflare become zones, which have a direct impact on the security and performance of your website, application, or API",[53,54,55,90,91,92,57],"Edit","Activation Check","Purge Cached Content","  Zones  Domains (or subdomains) that are added to Cloudflare become zones, which have a direct impact on the security and performance of your website, application, or API. Use your zone to monitor security and performance, update configurations, and apply zone-level products and services.  Cloudflare API docs  List  Lists, searches, sorts, and filters your zones. Listing zones across more than 500 accounts is currently not allowed.     $response   =   $client  ->  zones  ()  ->  list  (  'ACCOUNT_ID'  );\n  Create  Create Zone for the account.     $values   =   [\n       'name'   =>   'The domain name'\n   ];\n   \n   $response   =   $client  ->  zones  ()  ->  create  (  'ACCOUNT_ID'  , $values);\n  Details  Get Zone Details.     $response   =   $client  ->  zones  ()  ->  details  (  'ZONE_ID'  );\n  Edit  Edit Zone.     $values   =   [\n       'plan'   =>   'free'\n   ];\n   \n   $response   =   $client  ->  zones  ()  ->  update  (  'ZONE_ID'  );\n  Activation Check  Triggeres a new activation check for a PENDING Zone. This can be triggered every 5 min for paygo/ent customers, every hour for FREE Zones.     $response   =   $client  ->  zones  ()  ->  activationCheck  (  'ZONE_ID'  );\n  Purge Cached Content  Purge Cached Content     $values   =   [\n       'tags'   =>   [  'my-custom-cache-tag'  ]\n   ];\n   \n   \n   $response   =   $client  ->  zones  ()  ->  purge  (  'ZONE_ID'  , $values);\n  Using   CachePurge Configuration  helper.     use   Cloudflare\\Configurations\\Zones\\CachePurge  ;\n   \n   $config   =   (  new   CachePurge  ())\n       ->  byTags  ([  'my-custom-cache-tag'  ]);\n   \n   // OR\n   \n   $config   =   (  new   CachePurge  ())  ->  everything  ();\n   \n   $response   =   $client  ->  zones  ()  ->  purge  (  'zone_id'  , $config);\n  Delete  Delete Zone.     $response   =   $client  ->  zones  ()  ->  delete  (  'ZONE_ID'  );\n  html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":95,"path":96,"dir":97,"title":98,"description":99,"keywords":100,"body":105},"content:2.api:1.zones:1.dns.md","/api/zones/dns","zones","DNS Records","View, create, update your zones DNS Records on Cloudflare.",[101,53,54,102,103,55,56,104,57],"Scan","Export","Import","Overwrite","  DNS Records  View, create, update your zones DNS Records on Cloudflare.  Cloudflare API docs  Scan  Scan DNS record. Scan for common DNS records on your domain and automatically add them to your zone. Useful if you haven't updated your nameservers yet.     $response   =   $client  ->  zones  ()  ->  dns  ()  ->  scan  (  'zone_id'  );\n  List  List, search, sort, and filter a zones' DNS record.     $response   =   $client  ->  zones  ()  ->  dns  ()  ->  list  (  'zone_id'  );\n  Create  Create a new DNS record for a zone.     $response   =   $client  ->  zones  ()  ->  dns  ()  ->  create  (  'zone_id'  , [\n       'name'   =>   '@'\n       'content'   =>   '127.0.0.1'  ,\n       'proxied'   =>   true  ,\n       'type'   =>   'A'\n   ]);\n  Export  Export DNS record as   BIND config .     $response   =   $client  ->  zones  ()  ->  dns  ()  ->  export  (  'zone_id'  );\n   \n   file_put_contents  (  './test.txt'  , $response  ->  body  ());\n  Import  Import DNS record as   BIND config .     $contents   =   file_put_contents  (  './test.txt'  );\n   \n   $response   =   $client  ->  zones  ()  ->  dns  ()  ->  import  (  'zone_id'  , $contents);\n  Details  DNS record Details.     $response   =   $client  ->  zones  ()  ->  dns  ()  ->  details  (  'zone_id'  ,   'dns_record_id'  );\n  Update  Update an existing DNS record.     $response   =   $client  ->  zones  ()  ->  dns  ()  ->  update  (  'zone_id'  ,   'dns_record_id'  , [\n       'name'   =>   '@'\n       'content'   =>   '127.0.0.1'  ,\n       'proxied'   =>   true  ,\n       'type'   =>   'A'\n   ]);\n  Overwrite  Overwrite an existing DNS record.     $response   =   $client  ->  zones  ()  ->  dns  ()  ->  overwrite  (  'zone_id'  ,   'dns_record_id'  , [\n       'name'   =>   '@'\n       'content'   =>   '127.0.0.1'  ,\n       'proxied'   =>   true  ,\n       'type'   =>   'A'\n   ]);\n  Delete  Delete DNS record.     $response   =   $client  ->  zones  ()  ->  dns  ()  ->  delete  (  'zone_id'  ,   'dns_record_id'  );\n  html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":107,"path":108,"dir":97,"title":109,"description":110,"keywords":111,"body":112},"content:2.api:1.zones:2.dnssec.md","/api/zones/dnssec","DNSSEC","DNS Security Extensions (DNSSEC) adds an extra layer of authentication to DNS.",[55,56,57],"  DNSSEC  DNS Security Extensions (DNSSEC) adds an extra layer of authentication to DNS, ensuring requests are not routed to a spoofed domain.  Cloudflare API docs  Details  Details about DNSSEC status and configuration.     $response   =   $client  ->  zones  ()  ->  dnssec  ()  ->  details  (  'zone_id'  );\n  Update  Enable or disable DNSSEC.     $response   =   $client  ->  zones  ()\n       ->  dnssec  ()\n       ->  update  (  'zone_id'  ,   status  :   'active'  ,   multiSigner  :   false  ,   presigned  :   false  );\n  Delete  Delete DNSSEC records     $response   =   $client  ->  zones  ()  ->  dnssec  ()  ->  delete  (  'zone_id'  );\n  html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":114,"path":115,"dir":97,"title":116,"description":117,"keywords":118,"body":120},"content:2.api:1.zones:2.page-rules.md","/api/zones/page-rules","Page Rules","Cloudflare Page Rules allow you to make adjustments to requests, configure Cloudflare settings, and trigger specific actions for matching requests.",[119,53,54,55,56,104,57],"Settings","  Page Rules  Cloudflare Page Rules allow you to make adjustments to requests, configure Cloudflare settings, and trigger specific actions for matching requests.  Cloudflare API docs  Settings  Returns a list of settings (and their details) that Page Rules can apply to matching requests.     $response   =   $client  ->  zones  ()  ->  pageRules  ()  ->  settings  (  'zone_id'  );\n  List  List, search, sort, and filter a zones Page Rules.     $response   =   $client  ->  zones  ()  ->  pageRules  ()  ->  list  (  'zone_id'  );\n  Create  Creates a new Page Rule for a zone.     $response   =   $client  ->  zones  ()  ->  pageRules  ()  ->  create  (  'zone_id'  , [\n       'actions'   =>   [],\n       'targets'   =>   [],\n       'status'   =>   'active'\n   ]);\n  Using   PageRule Configuration  helper.     use   Cloudflare\\Configurations\\PageRule  ;\n   \n   $target   =   \"example.com/*\"  ;\n   \n   $config   =   (  new   PageRule  ($target))\n       ->  setStatus  (  true  )\n       ->  setPriority  (  100  )\n       ->  cacheLevel  (  'simplified'  )\n       ->  disableZaraz  (  true  )\n       ->  edgeCacheTTL  (  600  );\n   \n   $response   =   $client  ->  zones  ()  ->  pageRules  ()  ->  create  (  'zone_id'  , $config);\n  Details  Fetches the details of a Page Rule.     $response   =   $client  ->  zones  ()  ->  pageRules  ()  ->  details  (  'zone_id'  ,   'pageRuleId'  );\n  Update  Updates one or more fields of an existing Page Rule.     $response   =   $client  ->  zones  ()  ->  pageRules  ()  ->  update  (  'zone_id'  ,   'pageRuleId'  , [\n       'actions'   =>   [],\n       'targets'   =>   [],\n       'status'   =>   'active'\n   ]);\n  Overwrite  Replaces the configuration of an existing Page Rule. The configuration of the updated Page Rule will exactly match the data passed in the API request.     $response   =   $client  ->  zones  ()  ->  pageRules  ()  ->  overwrite  (  'zone_id'  ,   'pageRuleId'  , [\n       'actions'   =>   [],\n       'targets'   =>   [],\n       'status'   =>   'active'\n   ]);\n  Delete  Delete a Page Rule.     $response   =   $client  ->  zones  ()  ->  pageRules  ()  ->  delete  (  'zone_id'  ,   'pageRuleId'  );\n  html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":122,"path":123,"dir":97,"title":124,"description":125,"keywords":126,"body":127},"content:2.api:1.zones:4.cloud-conenctor-rules.md","/api/zones/cloud-conenctor-rules","Cloud Connector Rules","Cloud Connector allows you to route matching incoming traffic from your website to a public cloud provider that you define such as AWS, Google Cloud, and Azure.",[81,56],"  Cloud Connector Rules  Cloud Connector allows you to route matching incoming traffic from your website to a public cloud provider that you define such as AWS, Google Cloud, and Azure. With Cloud Connector you can make Cloudflare the control center for your web traffic, including traffic served from public cloud providers, without having to configure additional rules.  Cloudflare API docs  Get  Get Rules.     $response   =   $client  ->  zones  ()  ->  cloudConnector  ()  ->  get  (  'account_id'  );\n  Update  Update Rules.     $response   =   $client  ->  zones  ()  ->  cloudConnector  ()  ->  update  (  'account_id'  , [\n       'enabled'   =>   true  ,\n       'provider'   =>   'aws_s3'\n   ]);\n  html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":129,"path":130,"dir":97,"title":131,"description":132,"keywords":133,"body":134},"content:2.api:1.zones:5.holds.md","/api/zones/holds","Zone holds","Zone holds prevent other teams in your organization from adding zones that are already active in another account.",[81,54,73],"  Holds  Zone holds prevent other teams in your organization from adding zones that are already active in another account.  Cloudflare API docs  Get  Retrieve whether the zone is subject to a zone hold, and metadata about the hold.     $response   =   $client  ->  zones  ()  ->  holds  ()  ->  details  (  'zone_id'  );\n  Create  Enforce a zone hold on the zone, blocking the creation and activation of zones with this zone's hostname.     $response   =   $client  ->  zones  ()  ->  holds  ()  ->  create  (  'zone_id'  ,   true  );\n  Remove  Stop enforcement of a zone hold on the zone, permanently or temporarily, allowing the creation and activation of zones with this zone's hostname.     $response   =   $client  ->  zones  ()  ->  holds  ()  ->  delete  (  'zone_id'  ,   'hold_after'  );\n  html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":136,"path":137,"dir":97,"title":138,"description":139,"keywords":140,"body":141},"content:2.api:1.zones:6.lockdown.md","/api/zones/lockdown","Zone Lockdown","Zone Lockdown specifies a list of one or more IP addresses, CIDR ranges, or networks that are the only IPs allowed to access a domain, subdomain, or URL..",[53,54,55,56,57],"  Zone Lockdown  Zone Lockdown specifies a list of one or more IP addresses, CIDR ranges, or networks that are the only IPs allowed to access a domain, subdomain, or URL. You can configure multiple destinations, including IPv4/IPv6 addresses, in a single Zone Lockdown rule.  Cloudflare API docs  List  Fetches Zone Lockdown rules. You can filter the results using several optional parameters.     $response   =   $client  ->  zones  ()  ->  lockdowns  ()  ->  list  (  'zone_id'  );\n  Create  Creates a new Zone Lockdown rule.     $response   =   $client  ->  zones  ()  ->  lockdowns  ()  ->  create  (  'zone_id'  ,   '198.51.100.4'  );\n  Details  Fetches the details of a Zone Lockdown rule.     $response   =   $client  ->  zones  ()  ->  lockdowns  ()  ->  details  (  'zone_id'  ,   'lockdown_id'  );\n  Update  Updates an existing Zone Lockdown rule.     $response   =   $client  ->  zones  ()  ->  lockdowns  ()  ->  update  (  'zone_id'  ,   'lockdown_id'  ,   '198.51.100.4'  );\n  Delete  Deletes an existing Zone Lockdown rule.     $response   =   $client  ->  zones  ()  ->  lockdowns  ()  ->  delete  (  'zone_id'  ,   'lockdown_id'  );\n  html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":143,"path":144,"dir":145,"title":146,"description":147,"keywords":148,"body":151},"content:2.api:2.workers:0.analytics.md","/api/workers/analytics","workers","Workers Analytics","Retrieves Workers KV metrics for the given account.",[149,150],"Request Analytics","Stored Data Analytics","  Analytics  Retrieves Workers KV metrics for the given account.  Cloudflare API docs  Request Analytics  Retrieves Workers KV request metrics for the given account.     $response   =   $client  ->  workers  ()  ->  analytics  (  'account_id'  );\n  Stored Data Analytics  Retrieves Workers KV stored data metrics for the given account.     $response   =   $client  ->  workers  ()  ->  storedDataAnalytics  (  'account_id'  ,   'title'  );\n  html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":153,"path":154,"dir":145,"title":155,"description":156,"keywords":157,"body":159},"content:2.api:2.workers:1.settings.md","/api/workers/settings","Worker Account Settings","Worker Account Settings.",[158,54],"Fetch","  Account settings  Cloudflare API docs  Fetch  Fetches Worker account settings for an account.     $response   =   $client  ->  workers  ()  ->  settings  ()  ->  get  (  'account_id'  );\n  Create  Creates Worker Account Settings     $response   =   $client  ->  workers  ()  ->  settings  ()  ->  create  (  'account_id'  ,   'usage_model'  ,   true  );\n  html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":161,"path":162,"dir":145,"title":163,"description":164,"keywords":165,"body":166},"content:2.api:2.workers:2.cron.md","/api/workers/cron","Worker Cron Triggers","Cron Triggers allow users to map a cron expression to a Worker.",[158,56],"  Cron Triggers  Cron Triggers allow users to map a cron expression to a Worker using a scheduled() handler that enables Workers to be executed on a schedule.  Cloudflare API docs  Fetch  Fetches Cron Triggers for a Worker.     $response   =   $client  ->  workers  ()  ->  cron  ()  ->  get  (  'account_id'  ,   'script_name'  );\n  Update  UpdatesCron Triggers for a Worker.     $response   =   $client  ->  workers  ()  ->  cron  ()  ->  update  (  'account_id'  ,   'script_name'  , [  '*/30 * * * *'  ]);\n  html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":168,"path":169,"dir":145,"title":170,"description":171,"keywords":172,"body":173},"content:2.api:2.workers:3.deployments.md","/api/workers/deployments","Worker Deployments","Deployments track the version(s) of your Worker that are actively serving traffic.",[53,54],"  Deployments  Deployments track the version(s) of your Worker that are actively serving traffic. A deployment can consist of one or two versions of a Worker.  Cloudflare API docs  List  List of Worker Deployments. The first deployment in the list is the latest deployment actively serving traffic.     $response   =   $client  ->  workers  ()  ->  deployments  ()  ->  get  (  'account_id'  ,   'script_name'  );\n  Create  Deployments configure how Worker Versions are deployed to traffic. A deployment can consist of one or two versions of a Worker.     $values   =   [\n       'strategy'   =>   'percentage'  ,\n       'versions'   =>   [\n           [\n               'percentage'   =>   '100'  ,\n               'version_id'   =>   'bcf48806-b317-4351-9ee7-36e7d557d4de'\n           ]\n       ]\n   ];\n   \n   $response   =   $client  ->  workers  ()  ->  deployments  ()  ->  create  (  'account_id'  ,   'script_name'  , $values);\n  html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":175,"path":176,"dir":145,"title":177,"description":171,"keywords":178,"body":181},"content:2.api:2.workers:4.domains.md","/api/workers/domains","Worker Domains",[53,179,180,81],"Attach","Detach","  Domains  Cloudflare API docs  List  Lists all Worker Domains for an account.     $response   =   $client  ->  workers  ()  ->  domains  ()  ->  get  (  'account_id'  );\n  Attach  Attaches a Worker to a zone and hostname.     $values   =   [\n       'environment'   =>   'production'  ,\n       'hostname'   =>   'foo.example.com'  ,\n       'service'   =>   'foo'  ,\n       'zone_id'   =>   '593c9c94de529bbbfaac7c53ced0447d'  ,\n   ];\n   \n   $response   =   $client  ->  workers  ()  ->  domains  ()  ->  attach  (  'account_id'  , $values);\n  Detach  Detaches a Worker from a zone and hostname.     $response   =   $client  ->  workers  ()  ->  domains  ()  ->  detach  (  'account_id'  ,   'domain_id'  );\n  Get  Gets a Worker domain.     $response   =   $client  ->  workers  ()  ->  domains  ()  ->  domain  (  'account_id'  ,   'domain_id'  );\n  html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":183,"path":184,"dir":145,"title":185,"description":186,"keywords":187,"body":192},"content:2.api:2.workers:5.environment.md","/api/workers/environment","Worker Environment","Wrangler allows you to deploy the same Worker application with different configuration for each environment.",[188,189,190,191],"Get script content","Update script content","Get Script Settings","Update Script Settings","  Environment  Wrangler allows you to deploy the same Worker application with different configuration for each environment. You must configure environments in your Worker application’s wrangler.toml file.  Cloudflare API docs  Get script content  Get script content from a worker with an environment     $response   =   $client  ->  workers  ()  ->  environment  ()  ->  get  (  'account_id'  ,   'service_name'  ,   'environment_name'  );\n   \n   $content   =   $response  ->  body  ();\n  Update script content  Put script content from a worker with an environment     // TODO\n  Get Script Settings  Get script settings from a worker with an environment     $response   =   $client  ->  workers  ()  ->  environment  ()  ->  getSettings  (  'account_id'  ,   'service_name'  ,   'environment_name'  );\n  Update Script Settings  Get script settings from a worker with an environment     $response   =   $client  ->  workers  ()  ->  environment  ()  ->  updateSettings  (  'account_id'  ,   'service_name'  ,   'environment_name'  , [\n   \n   ]);\n  html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":194,"path":195,"dir":145,"title":196,"description":196,"keywords":197,"body":208},"content:2.api:2.workers:6.scripts.md","/api/workers/scripts","Worker Scripts",[198,199,200,201,202,190,191,203,204,205,206,207],"List Workers","Download Worker","Upload Worker Module","Get Content","Update Content","Get Settings","Update Settings","Get Usage Model","Update Usage Model","Delete Worker","  Scripts  Cloudflare API docs  List Workers  Fetch a list of uploaded workers.     $response   =   $client  ->  workers  ()  ->  scripts  ()  ->  get  (  'account_id'  );\n  Download Worker  Fetch raw script content for your worker. Note this is the original script content, not JSON encoded.     $response   =   $client  ->  workers  ()  ->  scripts  ()  ->  get  (  'account_id'  ,   'script_name'  );\n   \n   $content   =   $response  ->  body  ();\n  Upload Worker Module  Upload a worker module. You can find more about the multipart metadata on   CloudFlare docs .     //TODO\n  Get Content  Fetch script content only.     $response   =   $client  ->  workers  ()  ->  scripts  ()  ->  getContent  (  'account_id'  ,   'script_name'  );\n   \n   $content   =   $response  ->  body  ();\n  Update Content  Put script content without touching config or metadata     //TODO\n  Get Script Settings  Get script-level settings when using Worker Versions. Includes Logpush and Tail Consumers.     $response   =   $client  ->  workers  ()  ->  scripts  ()  ->  getScriptSettings  (  'account_id'  ,   'script_name'  );\n  Update Script Settings  Patch script-level settings when using Worker Versions. Includes Logpush and Tail Consumers.     $response   =   $client  ->  workers  ()  ->  scripts  ()  ->  updateScriptSettings  (  'account_id'  ,   'script_name'  , [\n       'logpush'   =>   false  ,\n       'tail_consumers'   =>   [\n           [\n               'environment'   =>   'production'\n           ]\n       ]\n   ]);\n  Get Settings  Get metadata and config, such as bindings or usage model     $response   =   $client  ->  workers  ()  ->  scripts  ()  ->  getSettings  (  'account_id'  ,   'script_name'  );\n  Update Settings  Patch metadata or config, such as bindings or usage model     $response   =   $client  ->  workers  ()  ->  scripts  ()  ->  updateSettings  (  'account_id'  ,   'script_name'  );\n  Get Usage Model  Fetches the Usage Model for a given Worker.     $response   =   $client  ->  workers  ()  ->  scripts  ()  ->  getUsageModel  (  'account_id'  ,   'script_name'  );\n  Update Usage Model  Updates the Usage Model for a given Worker. Requires a Workers Paid subscription.     $response   =   $client  ->  workers  ()  ->  scripts  ()  ->  updateUsageModel  (  'account_id'  ,   'script_name'  ,   'usage_model'  );\n  Delete Worker  Delete your worker. This call has no response body on a successful delete.     $response   =   $client  ->  workers  ()  ->  scripts  ()  ->  delete  (  'account_id'  ,   'script_name'  ,   true  |  false  );\n  html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":210,"path":211,"dir":145,"title":212,"description":212,"keywords":213,"body":216},"content:2.api:2.workers:7.subdomain.md","/api/workers/subdomain","Worker Subdomain",[214,215],"Get Subdomain","Create Subdomain","  Subdomain  Cloudflare API docs  Get Subdomain  Returns a Workers subdomain for an account.     $response   =   $client  ->  workers  ()  ->  subdomain  ()  ->  get  (  'account_id'  );\n  Create Subdomain  Creates a Workers subdomain for an account.     $response   =   $client  ->  workers  ()  ->  subdomain  ()  ->  create  (  'account_id'  ,   'example-subdomain'  );\n  html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":218,"path":219,"dir":145,"title":220,"description":220,"keywords":221,"body":225},"content:2.api:2.workers:8.versions.md","/api/workers/versions","Worker Versions",[222,223,224],"List Versions","Upload Version","Get Version Details","  Versions  You can upload changes (versions) to your Worker independent of changing the version that is actively serving traffic (deployment).  Cloudflare API docs  List Versions  List of Worker Versions. The first version in the list is the latest version.     $response   =   $client  ->  workers  ()  ->  versions  ()  ->  list  (  'account_id'  ,   'script_name'  );\n  Upload Version  Upload a Worker Version without deploying to Cloudflare's network. You can find more about the multipart metadata on Cloudflare   docs .     //TODO\n  Get Version Details     $response   =   $client  ->  workers  ()  ->  details  ()  ->  details  (  'account_id'  ,   'script_name'  ,   'version_id'  );\n  html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":227,"path":228,"dir":145,"title":229,"description":229,"keywords":230,"body":243},"content:2.api:2.workers:9.kv.md","/api/workers/kv","Workers KV Namespace",[231,232,233,234,235,236,237,238,239,240,241,242],"List Namespaces","Create a Namespace","Get a Namespace","Rename a Namespace","Remove a Namespace","Write multiple key-value pairs","Delete multiple key-value pairs","List a Namespace Keys","Read the metadata for a key","Read key-value pair","Write key-value pair with metadata","Delete key-value pair","  KV  Cloudflare API docs  List Namespaces  Returns the namespaces owned by an account.     $response   =   $client  ->  workers  ()  ->  kv  ()  ->  list  (  'account_id'  );\n  Create a Namespace  Creates a namespace under the given title. A 400 is returned if the account already owns a namespace with this title. A namespace must be explicitly deleted to be replaced.     $response   =   $client  ->  workers  ()  ->  kv  ()  ->  create  (  'account_id'  ,   'title'  );\n  Get a Namespace  Get the namespace corresponding to the given ID.     $response   =   $client  ->  workers  ()  ->  kv  ()  ->  delete  (  'account_id'  ,   'namespace_id'  );\n  Rename a Namespace  Modifies a namespace's title.     $response   =   $client  ->  workers  ()  ->  kv  ()  ->  delete  (  'account_id'  ,   'namespace_id'  ,   'title'  );\n  Remove a Namespace  Deletes the namespace corresponding to the given ID.     $response   =   $client  ->  workers  ()  ->  kv  ()  ->  delete  (  'account_id'  ,   'namespace_id'  );\n  Write multiple key-value pairs  Write multiple keys and values at once. Body should be an array of up to 10,000 key-value pairs to be stored, along with optional expiration information. Existing values and expirations will be overwritten. If neither expiration nor expiration_ttl is specified, the key-value pair will never expire. If both are set, expiration_ttl is used and expiration is ignored. The entire request size must be 100 megabytes or less.     $response   =   $client  ->  workers  ()  ->  kv  ()  ->  writeMultipleKeys  (  'account_id'  ,   'namespace_id'  );\n  Delete multiple key-value pairs  Remove multiple KV pairs from the namespace. Body should be an array of up to 10,000 keys to be removed.     $response   =   $client  ->  workers  ()  ->  kv  ()  ->  deleteMultipleKeys  (  'account_id'  ,   'namespace_id'  , $keys);\n  List a Namespace Keys  Lists a namespace keys.     $response   =   $client  ->  workers  ()  ->  kv  ()  ->  listKeys  (  'account_id'  ,   'namespace_id'  );\n  Read the metadata for a key  Returns the metadata associated with the given key in the given namespace. Use URL-encoding to use special characters (for example, :, !, %) in the key name.     $response   =   $client  ->  workers  ()  ->  kv  ()  ->  keyMetadata  (  'account_id'  ,   'namespace_id'  ,   'key_name'  );\n  Read key-value pair  Returns the value associated with the given key in the given namespace. Use URL-encoding to use special characters (for example, :, !, %) in the key name. If the KV-pair is set to expire at some point, the expiration time as measured in seconds since the UNIX epoch will be returned in the expiration response header.     $response   =   $client  ->  workers  ()  ->  kv  ()  ->  keyDetails  (  'account_id'  ,   'namespace_id'  ,   'key_name'  );\n  Write key-value pair with metadata  Write a value identified by a key. Use URL-encoding to use special characters (for example, :, !, %) in the key name. Body should be the value to be stored along with JSON metadata to be associated with the key/value pair. Existing values, expirations, and metadata will be overwritten. If neither expiration nor expiration_ttl is specified, the key-value pair will never expire. If both are set, expiration_ttl is used and expiration is ignored.     $response   =   $client  ->  workers  ()  ->  kv  ()  ->  writeKeyWithMetadata  (  'account_id'  ,   'namespace_id'  ,   'key_name'  );\n  Delete key-value pair  Remove a KV pair from the namespace. Use URL-encoding to use special characters (for example, :, !, %) in the key name.     $response   =   $client  ->  workers  ()  ->  kv  ()  ->  deleteKey  (  'account_id'  ,   'namespace_id'  ,   'key_name'  );\n  html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":245,"path":246,"dir":145,"title":247,"description":247,"keywords":248,"body":252},"content:2.api:2.workers:10.logs.md","/api/workers/logs","Worker Tail Logs",[249,250,251],"List Tails","Start Tail","Delete Tail","  Tail Logs  Cloudflare API docs  List Tails  Get list of tails currently deployed on a Worker.     $response   =   $client  ->  workers  ()  ->  logs  ()  ->  get  (  'account_id'  ,   'script_name'  );\n  Start Tail  Starts a tail that receives logs and exception from a Worker.     $response   =   $client  ->  workers  ()  ->  logs  ()  ->  start  (  'account_id'  ,   'script_name'  );\n  Delete Tail  Deletes a tail from a Worker.     $response   =   $client  ->  workers  ()  ->  logs  ()  ->  delete  (  'account_id'  ,   'script_name'  ,   'log_id'  );\n  html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":254,"path":255,"dir":145,"title":256,"description":256,"keywords":257,"body":258},"content:2.api:2.workers:11.routes.md","/api/workers/routes","Worker Routes",[53,54,81,56,57],"  Routes  Cloudflare API docs  List  Returns routes for a zone.     $response   =   $client  ->  workers  ()  ->  routes  ()  ->  get  (  'zone_id'  );\n  Create  Creates a route that maps a URL pattern to a Worker.     $response   =   $client  ->  workers  ()  ->  routes  ()  ->  create  (  'zone_id'  , [\n       'pattern'   =>   'example.net/*'  ,\n       'script'   =>   'this-is_my_script-01'\n   ]);\n  Get  Returns information about a route, including URL pattern and Worker.     $response   =   $client  ->  workers  ()  ->  routes  ()  ->  details  (  'zone_id'  ,   'route_id'  );\n  Update  Updates the URL pattern or Worker associated with a route.     $response   =   $client  ->  workers  ()  ->  routes  ()  ->  update  (  'zone_id'  ,   'route_id'  , [\n       'pattern'   =>   'example.net/*'  ,\n       'script'   =>   'this-is_my_script-01'\n   ]);\n  Delete  Deletes a route.     $response   =   $client  ->  workers  ()  ->  routes  ()  ->  delete  (  'zone_id'  ,   'route_id'  );\n  html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":260,"path":261,"dir":86,"title":262,"description":262,"keywords":263,"body":266},"content:2.api:3.d1:index.md","/api/d1","Cloudflare D1",[53,54,55,57,102,103,264,265],"Query","Query Raw","  Cloudflare D1  D1 is Cloudflare’s native serverless database. D1 allows you to build applications that handle large amounts of users at no extra cost. With D1, you can restore your database to any minute within the last 30 days.  Cloudflare API docs  List  Returns a list of D1 databases.     $response   =   $client  ->  d1  ()  ->  list  (  'ACCOUNT_ID'  );\n  Create  Returns the created D1 database.     \n   $response   =   $client  ->  d1  ()  ->  create  (  'ACCOUNT_ID'  ,   'name'  ,   'location'  );\n  Details  Returns the specified D1 database.     $response   =   $client  ->  d1  ()  ->  details  (  'ACCOUNT_ID'  ,   'DATABASE_ID'  );\n  Delete  Deletes the specified D1 database.     $response   =   $client  ->  d1  ()  ->  delete  (  'ACCOUNT_ID'  ,   'DATABASE_ID'  );\n  Export  Returns a URL where the SQL contents of your D1 can be downloaded. Note: this process may take some time for larger DBs, during which your D1 will be unavailable to serve queries. To avoid blocking your DB unnecessarily, an in-progress export must be continually polled or will automatically cancel.     $response   =   $client  ->  d1  ()  ->  export  (  'ACCOUNT_ID'  ,   'DATABASE_ID'  );\n  Import  Generates a temporary URL for uploading an SQL file to, then instructing the D1 to import it and polling it for status updates. Imports block the D1 for their duration.     $response   =   $client  ->  d1  ()  ->  import  (  'ACCOUNT_ID'  ,   'DATABASE_ID'  ,   'init'  );\n  Query  Returns the query result as an object.     $response   =   $client  ->  d1  ()  ->  query  (  'ACCOUNT_ID'  ,   'DATABASE_ID'  ,   '  SELECT   *   FROM   myTable   WHERE   field   =   ?   OR   field   =   ?;'  , [\n       \"firstParam\"  ,\n       \"secondParam\"\n   ]);\n  Query Raw  Returns the query result rows as arrays rather than objects. This is a performance-optimized version of the /query endpoint.     $response   =   $client  ->  d1  ()  ->  raw  (  'ACCOUNT_ID'  ,   'DATABASE_ID'  ,   '  SELECT   *   FROM   myTable   WHERE   field   =   ?   OR   field   =   ?;'  , [\n       \"firstParam\"  ,\n       \"secondParam\"\n   ]);\n  html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":268,"path":269,"dir":270,"title":271,"description":271,"keywords":272,"body":273},"content:2.api:3.d1:query-builder.md","/api/d1/query-builder","d1","D1 Query Builder",[],"  D1 Query Builder  // TODO",{"id":275,"path":276,"dir":277,"title":278,"description":278,"keywords":279,"body":281},"content:2.api:4.tunnel:1.routes.md","/api/tunnel/routes","tunnel","Tunnel Routing",[53,280,54,55,56,57],"Get route by IP","  Routing  Cloudflare API docs  List  Lists and filters private network routes in an account.     $response   =   $client  ->  tunnel  ()  ->  routes  ()  ->  list  (  'ACCOUNT_ID'  );\n  Get route by IP  etches routes that contain the given IP address.     $response   =   $client  ->  tunnel  ()  ->  routes  ()  ->  getByIP  (  'ACCOUNT_ID'  ,    '10.1.0.137'  );\n  Create  Routes a private network through a Cloudflare Tunnel.     $response   =   $client  ->  tunnel  ()  ->  routes  ()  ->  create  (  'ACCOUNT_ID'  ,   '172.16.0.0/16'  ,   'f70ff985-a4ef-4643-bbbc-4a0ed4fc8415'  ,   'Example comment for this route.'  );\n  Details  Get a private network route in an account.     $response   =   $client  ->  tunnel  ()  ->  routes  ()  ->  details  (  'ACCOUNT_ID'  ,   'ROUTE_ID'  );\n  Update  Updates an existing private network route in an account. The fields that are meant to be updated should be provided in the body of the request.     $response   =   $client  ->  tunnel  ()  ->  routes  ()  ->  update  (  'ACCOUNT_ID'  ,   'ROUTE_ID'  , [\n       'network'   =>   '172.16.0.0/16'\n   ]);\n  Delete  Delete a private network route from an account.     $response   =   $client  ->  tunnel  ()  ->  routes  ()  ->  delete  (  'ACCOUNT_ID'  ,   'ROUTE_ID'  );\n  html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":283,"path":284,"dir":277,"title":285,"description":285,"keywords":286,"body":287},"content:2.api:4.tunnel:2.virtual-networks.md","/api/tunnel/virtual-networks","Tunnel Virtual Networks",[53,54,55,56,57],"  Virtual Networks  Cloudflare API docs  List  Lists and filters virtual networks in an account.     $response   =   $client  ->  tunnel  ()  ->  virtualNetworks  ()  ->  list  (  'ACCOUNT_ID'  );\n  Create  Adds a new virtual network to an account.     $response   =   $client  ->  tunnel  ()  ->  virtualNetworks  ()  ->  create  (  'ACCOUNT_ID'  ,   'us-east-1-vpc'  ,   true  ,   'Optional remark describing the virtual network.'  );\n  Details  Get a virtual network.     $response   =   $client  ->  tunnel  ()  ->  virtualNetworks  ()  ->  details  (  'ACCOUNT_ID'  ,   'VIRTUAL_NETWORK_ID'  );\n  Update  Updates an existing virtual network.     $response   =   $client  ->  tunnel  ()  ->  virtualNetworks  ()  ->  update  (  'ACCOUNT_ID'  ,   'VIRTUAL_NETWORK_ID'  , [\n       'name'   =>   'us-east-1-vpc'\n   ]);\n  Delete  Delete an existing virtual network.     $response   =   $client  ->  tunnel  ()  ->  virtualNetworks  ()  ->  delete  (  'ACCOUNT_ID'  ,   'VIRTUAL_NETWORK_ID'  );\n  html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":289,"path":290,"dir":86,"title":291,"description":291,"keywords":292,"body":293},"content:2.api:5.ips.md","/api/ips","Cloudflare IPs",[],"  Cloudflare IPs  Get IPs used on the Cloudflare/JD Cloud network, see   https://www.cloudflare.com/ips  for Cloudflare IPs or   https://developers.cloudflare.com/china-network/reference/infrastructure/  for JD Cloud IPs.  Cloudflare API docs     $response   =   $client  ->  ips  ()  ->  get  ();\n  html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":295,"path":296,"dir":97,"title":297,"description":7,"keywords":298,"body":299},"content:3.configurations:1.zones:1.page-rules.md","/configurations/zones/page-rules","PageRule",[18],"  PageRule  Usage  Cloudflare API provides extensive configuration for Page Rules, this helper aims to simplify it.     \n   use   Cloudflare\\Configurations\\Zones\\PageRule  ;\n   \n   $pageRule   =   new   PageRule  (  'example.com/*'  );\n   \n   $pageRule\n       ->  enable  ()\n       ->  cacheLevel  (  'simplified'  )\n       ->  disableZaraz  (  true  );\n   \n   $response   =   $client  ->  zones  ()  ->  pageRules  ()  ->  create  (  'zone_id'  , $pageRule);\n  html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":301,"path":302,"dir":97,"title":303,"description":7,"keywords":304,"body":305},"content:3.configurations:1.zones:2.cache-purge.md","/configurations/zones/cache-purge","Cache Purge",[18],"  Cache Purge  Usage  Cloudflare API provides extensive configuration for Purge Cached Content, this helper aims to simplify it.     \n   use   Cloudflare\\Configurations\\Zones\\CachePurge  ;\n   \n   $cachePurge   =   new   CachePurge  ();\n   \n   $cachePurge\n       ->  byHosts  ([  'foo.example.com'  ,   'bar.example.com'  ]);\n   \n   // OR\n   \n   $cachePurge  ->  everything  ();\n   \n   // OR\n   \n   // byFilesAdvanced can be chained to add multiple files.\n   $cachePurge\n       ->  byFilesAdvanced  (  'https://example.com/my-script.js'  ,   'mobile'  )\n       ->  byFilesAdvanced  (  'https://example.com/my-script2.js'  ,   'desktop'  );\n   \n   $response   =   $client  ->  zones  ()  ->  purge  (  'zone_id'  , $cachePurge);\n  html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",{"id":307,"path":308,"dir":145,"title":309,"description":7,"keywords":310,"body":311},"content:3.configurations:2.workers:1.deployment.md","/configurations/workers/deployment","Deployment",[18],"  Deployment  Usage  Cloudflare API provides extensive configuration for Workers Deployment, this helper aims to simplify it.     \n   use   Cloudflare\\Configurations\\Workers\\Deployment  ;\n   \n   $deployment   =   new   Deployment  (  'This is a human-readable message about the deployment'  );\n   \n   $deployment\n       ->  setMessage  (  'This is a human-readable message about the deployment that overwrites the initial message.'  )\n       ->  addVersion  (  'version_id'  ,   0.01  );\n   \n   $response   =   $client  ->  workers  ()  ->  deployments  ()  ->  create  (  'zone_id'  , $deployment);\n  html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}",1724283214495]